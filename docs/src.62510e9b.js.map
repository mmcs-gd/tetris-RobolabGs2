{"version":3,"sources":["src/Piece.js","src/GameField.js","src/tetris.js","src/index.js"],"names":["WIDTH","HEIGHT","SIZE","Piece","row","column","color","di","dj","ctx","fillStyle","strokeStyle","i","j","toCoords","drawRoundRect","x","y","width","height","radius","fill","stroke","tl","tr","br","bl","defaultRadius","side","beginPath","moveTo","lineTo","quadraticCurveTo","closePath","GameField","bottomRow","pieces","piece","every","p","intersects","left","right","top","bottom","touchBottomRow","touchAnotherPiece","some","push","forEach","t","draw","a","b","c","d","COLUMNS","ROWS","GREEN","RED","YELLOW","BLUE","GREY","COLORS","gameState","init","canvas","activePiece","getRandomInt","getRandomColor","field","prevSec","update","time","stopGame","Math","ceil","shift","hasTouchBottom","append","moveActivePieceRight","pieceSpaceIsUnoccupied","moveActivePieceLeft","getContext","clearRect","onKeyDown","event","key","max","floor","random","length","document","addEventListener","lastTick","stopCycle","getElementById","tickLength","run","tFrame","window","requestAnimationFrame","nextTick","numTicks","timeSinceTick","cancelAnimationFrame","performance","now"],"mappings":"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","file":"src.62510e9b.js","sourceRoot":"..","sourcesContent":["const WIDTH = 2\nconst HEIGHT = 2\nconst SIZE = 22\n\nexport default class Piece {\n  constructor(row, column, color) {\n    this.row = row\n  \tthis.column = column\n  \tthis.color = color\n  }\n\n  shift(di, dj) {\n    this.row += di\n    this.column += dj\n  }\n\n  get left() {\n    return this.row\n  }\n\n  get right() {\n    return this.row + WIDTH - 1\n  }\n\n  get top() {\n    return this.column\n  }\n\n  get bottom() {\n    return this.column + HEIGHT - 1\n  }\n\n  draw(ctx) {\n    ctx.fillStyle = this.color\n    ctx.strokeStyle = this.color\n\n    for(let i = 0; i < WIDTH; i++) {\n      for(let j = 0; j < HEIGHT; j++) {\n        const [x, y] = toCoords(this.row + i, this.column + j)\n        drawRoundRect(ctx, x, y, 20, 20, 5, true, false)\n      }\n    }\n  }\n}\n\nfunction toCoords(i, j) {\n  return [i * SIZE + 1, j * SIZE + 1]\n}\n\nfunction drawRoundRect(ctx, x, y, width, height, radius, fill, stroke) {\n  if (typeof stroke === 'undefined') {\n    stroke = true\n  }\n  if (typeof radius === 'undefined') {\n    radius = 5\n  }\n  if (typeof radius === 'number') {\n    radius = {tl: radius, tr: radius, br: radius, bl: radius}\n  } else {\n    var defaultRadius = {tl: 0, tr: 0, br: 0, bl: 0}\n    for (var side in defaultRadius) {\n      radius[side] = radius[side] || defaultRadius[side]\n    }\n  }\n  ctx.beginPath()\n  ctx.moveTo(x + radius.tl, y)\n  ctx.lineTo(x + width - radius.tr, y)\n  ctx.quadraticCurveTo(x + width, y, x + width, y + radius.tr)\n  ctx.lineTo(x + width, y + height - radius.br)\n  ctx.quadraticCurveTo(x + width, y + height, x + width - radius.br, y + height)\n  ctx.lineTo(x + radius.bl, y + height)\n  ctx.quadraticCurveTo(x, y + height, x, y + height - radius.bl)\n  ctx.lineTo(x, y + radius.tl)\n  ctx.quadraticCurveTo(x, y, x + radius.tl, y)\n  ctx.closePath()\n  if (fill) {\n    ctx.fill()\n  }\n  if (stroke) {\n    ctx.stroke()\n  }\n}","export default class GameField {\n  constructor(bottomRow) {\n    this.pieces = []\n    this.bottomRow = bottomRow\n  }\n\n  pieceSpaceIsUnoccupied(piece) {\n    return this.pieces.every(p => (\n      !(\n        intersects(piece.left, piece.right, p.left, p.right) &&\n        intersects(piece.top, piece.bottom, p.top, p.bottom)\n      )\n    ))\n  }\n\n  hasTouchBottom(piece) {\n    const touchBottomRow = piece.bottom >= this.bottomRow\n\n    const touchAnotherPiece = this.pieces.some(p => (\n      intersects(\n        piece.left, piece.right,\n        p.left, p.right\n      ) && piece.bottom + 1 == p.top\n    ))\n\n    return touchBottomRow || touchAnotherPiece\n  }\n\n  append(piece) {\n    this.pieces.push(piece)\n  }\n\n  draw(ctx) {\n    this.pieces.forEach(t => t.draw(ctx))\n  }\n}\n\n/*\n * There are two possible situations:\n *\n * a----b\n *    c-----d\n *\n * or:\n *\n * c----d\n *    a-----b\n */\nfunction intersects(a, b, c, d) {\n  return (a >= c && a <= d) || (b >= c && b <= d)\n}\n","import Piece from './Piece'\nimport GameField from './GameField'\n\nconst COLUMNS = 12\nconst ROWS = 24\n\nconst GREEN = '#45FD6B'\nconst RED = '#FC393E'\nconst YELLOW = '#FED248'\nconst BLUE = '#3B73FB'\nconst GREY = '#DBE1F1'\n\nconst COLORS = [\n  GREEN,\n  RED,\n  YELLOW,\n  BLUE,\n  GREY\n]\n\nconst gameState = {}\n\nexport function init(canvas) {\n  gameState.activePiece = new Piece(\n    getRandomInt(COLUMNS - 2),\n    0,\n    getRandomColor()\n  )\n\n  gameState.field = new GameField(ROWS - 1)\n  gameState.prevSec = 0\n}\n\n\nexport function update(time, stopGame) {\n  const { prevSec, activePiece, field } = gameState\n\n  if (activePiece) {\n    if (prevSec != Math.ceil(time / 100)) {\n      activePiece.shift(0, 1)\n      gameState.prevSec = Math.ceil(time / 100)\n\n      if (field.hasTouchBottom(activePiece)) {\n        field.append(activePiece)\n        gameState.activePiece = null\n      }\n    }\n  } else {\n    gameState.activePiece = new Piece(\n      getRandomInt(COLUMNS - 2),\n      0,\n      getRandomColor()\n    )\n  }\n\n  // if there is no unoccupied space call stopGame()\n}\n\n\nfunction moveActivePieceRight() {\n  const { activePiece, field } = gameState\n\n  if (!activePiece) return\n\n  if (activePiece.right + 1 < COLUMNS) {\n    activePiece.shift(1, 0)\n    if (!field.pieceSpaceIsUnoccupied(activePiece)) {\n      // revert move beacaue is not allowed\n      activePiece.shift(-1, 0)\n    }\n  }\n}\n\nfunction moveActivePieceLeft() {\n  const { activePiece, field } = gameState\n\n  if (!activePiece) return\n\n  if (activePiece.left - 1 >= 0) {\n    activePiece.shift(-1, 0)\n    if (!field.pieceSpaceIsUnoccupied(activePiece)) {\n      // revert move beacaue is not allowed\n      activePiece.shift(1, 0)\n    }\n  }\n}\n\nexport function draw(canvas, time) {\n  const ctx = canvas.getContext('2d')\n  ctx.clearRect(0, 0, canvas.width, canvas.height)\n\n  const { activePiece, field } = gameState\n\n  if (activePiece) {\n    activePiece.draw(ctx)\n  }\n\n  field.draw(ctx)\n}\n\nfunction onKeyDown(event) {\n  const { key } = event\n  if (key === \"ArrowRight\") {\n    moveActivePieceRight()\n  } else if (key === \"ArrowLeft\") {\n    moveActivePieceLeft()\n  }\n}\n\ndocument.addEventListener('keydown', onKeyDown)\n\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * Math.floor(max))\n}\n\nfunction getRandomColor() {\n  return COLORS[getRandomInt(COLORS.length)]\n}\n","import {\n  init,\n  update,\n  draw\n} from './tetris'\n\nconst canvas = document.getElementById('cnvs')\n\nconst tickLength = 15 //ms\nlet lastTick\nlet stopCycle\n\nfunction run(tFrame) {\n  stopCycle = window.requestAnimationFrame(run)\n\n  const nextTick = lastTick + tickLength\n  let numTicks = 0\n\n  if (tFrame > nextTick) {\n    const timeSinceTick = tFrame - lastTick\n    numTicks = Math.floor(timeSinceTick / tickLength)\n  }\n\n  for (let i = 0; i < numTicks; i++) {\n    lastTick = lastTick + tickLength\n    update(lastTick, stopGame)\n  }\n\n  draw(canvas, tFrame)\n}\n\nfunction stopGame() {\n  window.cancelAnimationFrame(stopCycle)\n}\n\nlastTick = performance.now()\ninit(canvas)\nrun()\n"]}